% docker, container

# Remove an image
docker image rm <image_id>

# Delete an image from the local image store
docker rmi <image_id>

# List all images that are locally stored with the Docker engine
docker images

# Build an image from the Dockerfile in the current directory and tag the image
docker build -t <image>:<version> .

# Pull an image from a registry
docker pull <image>:<version>

# Stop a running container through SIGTERM
docker stop <container_id>

# Stop a running container through SIGKILL
docker kill <container_id>

# List the networks
docker network ls

# List the running containers
docker ps

# Delete all running and stopped containers
docker rm -f $(docker ps -aq)

# Create a new bash process inside the container and connect it to the terminal
docker exec -it <container_id> bash

# Print the last lines of a containerâ€™s logs
docker logs --tail 100 <container_id> | less

# volume clean
docker volume prune

$ image_id: docker images --- --headers 1 --column 3
$ container_id: docker ps --- --headers 1 --column 1

# docker cp into container
docker cp <localfile> <container_id>:<dir_or_file_in_container>
$ localfile: ls -l  | awk '{print $9}'

# docker ip list
docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)

# docker build
docker build -t <builded_image_name> .

# docker auto restart
docker update --restart=<restart_type> <container_id>

$ restart_type: echo -e 'always\nno\non-failure:3'

# cmatrix
docker run --rm -it inutano/cmatrix
